2019_herr <- bc_herr[, 1]#
2029_herr <- bc_herr[,11]#
2039_herr <- bc_herr[,21]#
2049_herr <- bc_herr[,31]#
2059_herr <- bc_herr[,41]#
2069_herr <- bc_herr[,51]
library(stringr)
for(i in seq_len(100)) {#
  xy <- str_split(2019_herr[i], " ")#
  latitude[i] <- as.numeric(xy[[1]][1])#
  longitude[i] <- as.numeric(xy[[1]][2])#
}
2019_pos <- data.frame(cbind(longitude, latitude))
longitude <- numeric(100)#
latitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(2019_herr[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
2019_pos <- data.frame(cbind(longitude, latitude))
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)#
bc_herr_2019 <- bc_herr[, 1]#
bc_herr_2029 <- bc_herr[,11]#
bc_herr_2039 <- bc_herr[,21]#
bc_herr_2049 <- bc_herr[,31]#
bc_herr_2059 <- bc_herr[,41]#
bc_herr_2069 <- bc_herr[,51]
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)
library(tidyverse)#
library('plot.matrix')#
library(stringr)
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)#
bc_herr_2019 <- bc_herr[, 1]#
bc_herr_2029 <- bc_herr[,11]#
bc_herr_2039 <- bc_herr[,21]#
bc_herr_2049 <- bc_herr[,31]#
bc_herr_2059 <- bc_herr[,41]#
bc_herr_2069 <- bc_herr[,51]#
#
longitude <- numeric(100)#
latitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2019[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))
dim(bc_herring)
dim(bc_herr)
bc_herr_2019 <- bc_herr$X1
bc_herr_2019 <- bc_herr$X1#
bc_herr_2029 <- bc_herr$X11#
bc_herr_2039 <- bc_herr$X21#
bc_herr_2049 <- bc_herr$X31#
bc_herr_2059 <- bc_herr$X41#
bc_herr_2069 <- bc_herr$X51
longitude <- numeric(100)#
latitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2019[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))
bc_herr_2019_pos
str_split("56.5, -12.5")
str_split("56.5, -12.5", pattern = " ")
str_split("56.5 -12.5", pattern = " ")
longitude <- numeric(100)#
latitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2019[i], " ")#
	latitude[i] <- as.numeric(xy[1])#
	longitude[i] <- as.numeric(xy[2])#
}#
#
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))#
bc_herr_2019_pos
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2019[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))#
bc_herr_2019_pos
str_split(bc_herr_2019[i], " ")
for (i in seq_len(100)) {#
	str_split(bc_herr_2019[i], " ")#
}
for (i in seq_len(100)) {#
	xy = str_split(bc_herr_2019[i], " ")#
	print(xy)#
}
library(tidyverse)#
library(stringr)#
library(ggplot2)#
#
bc_herr <- read_csv("bc_herring.csv", col_names = TRUE)#
bc_herr <- bc_herr[,-1]#
#
# plot.new()#
longitude <- numeric(51)#
latitude <- numeric(51)#
#
#for(i in seq_len(100)) {#
  #for(j in seq_len(51)) {#
    #xy <- str_split(bc_herr[1, j], " ")#
    #y[j] <- as.numeric(xy[[1]][1])#
    #x[j] <- as.numeric(xy[[1]][2])#
  #}#
  #smoothScatter(x, y)#
#}#
#
end_pos <- bc_herr$X50#
#
for(i in seq_len(100)) {#
  xy <- str_split(end_pos[i], " ")#
  latitude[i] <- as.numeric(xy[[1]][1])#
  longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
final_pos <- data.frame(cbind(longitude, latitude))
final_pos
for (i in seq_len(100)) {#
	xy = str_split(bc_herr_2069[i], " ")#
	print(xy)#
}
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2069[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}
bc_herr_2019_pos <- data.frame(cbind(longitude, latitude))#
bc_herr_2019_pos
bc_herr_2069_pos
bc_herr_2069_pos <- data.frame(cbind(longitude, latitude))#
bc_herr_2069_pos
row_num <- numeric(100)#
col_num <- numeric(100)
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}
num
table(num)
loc = matrix(0, nrow = 15, ncol = 20)
loc = matrix(1:300, nrow = 15, ncol = 20)
loc[1]#
loc[18]#
loc[244]
for (block in num) {#
	loc[block] += 1#
}
loc = matrix(0, nrow = 15, ncol = 20)#
#
for (block in num) {#
	loc[block] = loc[block] + 1#
}
loc
colnames(loc) = seq(-16.5, 2.5, 1)#
rownames(loc) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", col = topo.colors)
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", break = seq(0,20,1) col = topo.colors)
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1) col = topo.colors)
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
colnames(loc) = seq(-16.5, 2.5, 1)#
rownames(loc) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
loc = matrix(0, nrow = 15, ncol = 20, byrow = TRUE)#
#
for (block in num) {#
	loc[block] = loc[block] + 1#
}#
#
colnames(loc) = seq(-16.5, 2.5, 1)#
rownames(loc) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(loc, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
plot(t(loc), xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
loc[block, byrow = TRUE]
forecast[10,]
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
forecast[10,]
forecast = read.csv("forecast_sst_50.csv", row.names = 1)#
loc = read.csv("loc.csv", row.names = 1)#
colnames(forecast) = loc[[1]]#
#
# Example#
x <- matrix(runif(35), ncol=5) # create a numeric matrix object#
x#
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins#
plot(x, col = topo.colors)#
#
# Actual Data#
sst_2029 = matrix(as.numeric(forecast[10,]), nrow = 15, ncol = 20, byrow = TRUE)#
colnames(sst_2029) = seq(-16.5, 2.5, 1)#
rownames(sst_2029) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
sst_2029 = matrix(as.numeric(forecast[10,]), nrow = 15, ncol = 20, byrow = TRUE)#
colnames(sst_2029) = seq(-16.5, 2.5, 1)#
rownames(sst_2029) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
sst_2029 = matrix(as.numeric(forecast[,10]), nrow = 15, ncol = 20, byrow = TRUE)#
colnames(sst_2029) = seq(-16.5, 2.5, 1)#
rownames(sst_2029) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
# Actual Data#
sst_2029 = matrix(as.numeric(forecast[,11]), nrow = 15, ncol = 20, byrow = TRUE)#
colnames(sst_2029) = seq(-16.5, 2.5, 1)#
rownames(sst_2029) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if (forecast[i,11] == NA)#
	counter = NA#
}
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter = NA#
}
counter
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}
counter
for (block in num) {#
	counter[block] = counter[block] + 1#
}
counter
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc) = seq(-16.5, 2.5, 1)#
rownames(loc) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = topo.colors)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = BColorBrewer)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = table(loc))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), col = "viridis")
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", breaks = seq(0,20,1), fmt.cell = '%d')
)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d')
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = topo.cal)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = topo.colors)
library("ggplot2")
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = viridis(10))
library("viridis")
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = viridis(10))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = viridis(1))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = viridis(20))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = viridis)
library(RColorBrewer)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = Dark2)
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = "Dark2")
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = magma(20))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "2069", fmt.cell = '%d', col = plasma(20))
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2069", fmt.cell = '%d', col = plasma(20))
png("bch_map_2069", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2069", fmt.cell = '%d', col = plasma(20))#
dev.off()
png("bch_map_2069.png", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2069", fmt.cell = '%d', col = plasma(20))#
dev.off()
# Create empty vectors to store location (lat,lon) info#
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2059[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc) = seq(-16.5, 2.5, 1)#
rownames(loc) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
png("bch_map_2059.png", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2059", fmt.cell = '%d', col = plasma(20))#
dev.off()
colnames(loc) = seq(-16.5, 2.5, 1)
# Create empty vectors to store location (lat,lon) info#
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2069[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc_counter) = seq(-16.5, 2.5, 1)#
rownames(loc_counter) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
png("bch_map_2069.png", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2069", fmt.cell = '%d', col = plasma(20))#
dev.off()
# Create empty vectors to store location (lat,lon) info#
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2059[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc_counter) = seq(-16.5, 2.5, 1)#
rownames(loc_counter) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
png("bch_map_2059.png", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2059", fmt.cell = '%d', col = plasma(20))#
dev.off()
# Create empty vectors to store location (lat,lon) info#
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2049[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc_counter) = seq(-16.5, 2.5, 1)#
rownames(loc_counter) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
png("bch_map_2049.png", 600,600)#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2049", fmt.cell = '%d', col = plasma(20))#
dev.off()
paste("bch_map_20", 3, "9.png")
help(paste)
paste("bch_map_20", 3, "9.png", sep = "")
years_of_interest = c(2029, 2039, 2049, 2059, 2069)#
col_num = years_of_interest - 2019 + 1
col_num
years_of_interest = c(2029, 2039, 2049, 2059, 2069)#
col_num = years_of_interest - 2019 + 1#
#
for (i in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
	col_lable = paste("X", i, sep = "")#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr$col_lable, " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", i+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", i+18, ", Best Case", sep = "")#
	png("bch_map_2039.png", 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = "The Mostly Likely Location for Herring in 2039, Best Case", #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
bc_herr[[52]]
bc_herr[[51]]
for (i in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[[i]], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", i+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", i+18, ", Best Case", sep = "")#
	png("bch_map_2039.png", 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = "The Mostly Likely Location for Herring in 2039, Best Case", #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
col_num
for (i in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[,i], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", i+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", i+18, ", Best Case", sep = "")#
	png("bch_map_2039.png", 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = "The Mostly Likely Location for Herring in 2039, Best Case", #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
years_of_interest = c(2029, 2039, 2049, 2059)#
col_num = years_of_interest - 2019 + 1#
#
for (i in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[,i], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", i+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", i+18, ", Best Case", sep = "")#
	png("bch_map_2039.png", 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = "The Mostly Likely Location for Herring in 2039, Best Case", #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
bc_herr[,1]
years_of_interest = c(2029, 2039, 2049, 2059)#
col_num = years_of_interest - 2019 + 1#
#
for (n in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", i+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", i+18, ", Best Case", sep = "")#
	png("bch_map_2039.png", 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = "The Mostly Likely Location for Herring in 2039, Best Case", #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
years_of_interest = c(2029, 2039, 2049, 2059, 2069)#
col_num = years_of_interest - 2019 + 1
years_of_interest = c(2029, 2039, 2049, 2059, 2069)#
col_num = years_of_interest - 2019 + 1#
#
for (n in col_num){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
col_num
col_num = years_of_interest - 2019 + 1
col_num
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
years_of_interest = c(2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 1#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
# Create empty vectors to store location (lat,lon) info#
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2039[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc_counter) = seq(-16.5, 2.5, 1)#
rownames(loc_counter) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for Herring in 2039, Best Case", fmt.cell = '%d', col = plasma(20))
latitude <- numeric(100)#
longitude <- numeric(100)#
#
for (i in seq_len(100)) {#
	xy <- str_split(bc_herr_2029[i], " ")#
	latitude[i] <- as.numeric(xy[[1]][1])#
	longitude[i] <- as.numeric(xy[[1]][2])#
}#
#
# Create empty vectors to store location (row,col) info#
row_num <- numeric(100)#
col_num <- numeric(100)#
#
for (i in seq_len(100)) {#
	row_num[i] = 62.5 - latitude[i] + 1#
	col_num[i] = longitude[i] + 16.5 + 1#
}#
#
# Create empty vectors to store location (block number) info#
#
# Up to down, left to right#
# First block: 62.5, -16.5#
# 300th block: 48.5, 2.5#
num <- numeric(100)#
#
for (i in seq_len(100)) {#
	num[i] = 20 * row_num[i] + col_num[i]#
}#
#
table(num)#
#
# Create empty vectors to count ending block number#
counter = numeric(300)#
#
# Mark Land#
for (i in seq_len(300)) {#
	if(is.na(forecast[i,11]))#
	counter[i] = NA#
}#
#
for (block in num) {#
	counter[block] = counter[block] + 1#
}#
#
# Convert counter to matrix form to be visualized on map#
loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
colnames(loc_counter) = seq(-16.5, 2.5, 1)#
rownames(loc_counter) = seq(62.5, 48.5, -1)#
par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
# Visualize#
plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', main = "The Mostly Likely Location for#
 Herring in 2029, Best Case", fmt.cell = '%d', col = plasma(20))
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 1#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
wc_herr = read_csv("wc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 1#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(wc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("wch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Worst Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 1
years_col
wc_herr[,1]
wc_herr[,2]
wc_herr[,52]
bc_herr[,52]
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)
wc_herr = read_csv("wc_herring.csv", col_names = TRUE)
bc_herr[,52]
bc_herr[,1]
# ------------------ Forecasted Ending Point Visualization ------------------ ##
#
## <--------------------------------------------------------------------------->#
    ## Best Case, Herring#
    ## 2019(starting)/2029/2039/2049/2059/2069#
#
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}#
## <--------------------------------------------------------------------------->#
    ## Worst Case, Herring#
    ## 2019(starting)/2029/2039/2049/2059/2069#
wc_herr = read_csv("wc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(wc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("wch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Worst Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
# ------------------ Forecasted Ending Point Visualization ------------------ ##
#
## <--------------------------------------------------------------------------->#
    ## Best Case, Herring#
    ## 2019(starting)/2029/2039/2049/2059/2069#
#
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+18, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}#
## <--------------------------------------------------------------------------->#
    ## Worst Case, Herring#
    ## 2019(starting)/2029/2039/2049/2059/2069#
wc_herr = read_csv("wc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(wc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("wch_map_20", n+17, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+18, ", Worst Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
bc_herr = read_csv("bc_herring.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_herr[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bch_map_20", n+17, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Herring in 20", n+17, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
bc_mack = read_csv("bc_mackerel.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(bc_mack[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("bcm_map_20", n+17, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Mackerel in 20", n+17, ", Best Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
## <--------------------------------------------------------------------------->#
    ## Worst Case, Mackerel#
    ## 2019(starting)/2029/2039/2049/2059/2069#
#
wc_mack = read_csv("wc_mackerel.csv", col_names = TRUE)#
years_of_interest = c(2019, 2029, 2039, 2049, 2059, 2069)#
years_col = years_of_interest - 2019 + 2#
#
for (n in years_col){#
	# Create empty vectors to store location (lat,lon) info#
	latitude <- numeric(100)#
	longitude <- numeric(100)#
#
	for (i in seq_len(100)) {#
		xy <- str_split(wc_mack[i,n], " ")#
		latitude[i] <- as.numeric(xy[[1]][1])#
		longitude[i] <- as.numeric(xy[[1]][2])#
	}#
#
	# Create empty vectors to store location (row,col) info#
	row_num <- numeric(100)#
	col_num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		row_num[i] = 62.5 - latitude[i] + 1#
		col_num[i] = longitude[i] + 16.5 + 1#
	}#
#
	# Create empty vectors to store location (block number) info#
#
	# Up to down, left to right#
	# First block: 62.5, -16.5#
	# 300th block: 48.5, 2.5#
	num <- numeric(100)#
#
	for (i in seq_len(100)) {#
		num[i] = 20 * row_num[i] + col_num[i]#
	}#
#
	table(num)#
#
	# Create empty vectors to count ending block number#
	counter = numeric(300)#
#
	# Mark Land#
	for (i in seq_len(300)) {#
		if(is.na(forecast[i,11]))#
		counter[i] = NA#
	}#
#
	for (block in num) {#
		counter[block] = counter[block] + 1#
	}#
#
	# Convert counter to matrix form to be visualized on map#
	loc_counter = matrix(counter, nrow = 15, ncol = 20, byrow = TRUE)#
#
	colnames(loc_counter) = seq(-16.5, 2.5, 1)#
	rownames(loc_counter) = seq(62.5, 48.5, -1)#
	par(mar = c(5.1, 4.1, 4.1, 4.1))#
#
	# Visualize#
	file = paste("wcm_map_20", n+17, ".png", sep = "")#
	main = paste( "The Mostly Likely Location for Mackerel in 20", n+17, ", Worst Case", sep = "")#
	png(file, 600,600)#
	plot(loc_counter, xlab = "Longitude", ylab = 'Latitude', #
	main = main, #
	fmt.cell = '%d', col = plasma(20))#
	dev.off()#
}
library(tidyverse)#
library(forecast)#
library(stats)#
library(tis)#
library(trend)#
library(tseries)#
#
annual_avg_sst = read.csv("annual_avg_sst_150.csv", row.names = 1)#
loc = read.csv("loc.csv", row.names = 1)#
colnames(annual_avg_sst) = loc[[1]]
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)#
#
## --------------------- Time Series Plot, Trend --------------------- ###
#
jpeg("block_1_ts.jpg", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
abline(h = mean(first_block) col = "red3", lwd = 2)#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()#
#
# The null hypothesis for this test is that there is no monotonic trend in the series.#
# The alternate hypothesis is that a trend exists. This trend can be positive, negative, or non-null.#
#
mk.test(first_block)#
#
t = seq(1870, 1870 + length(first_block)-1)#
t1 = lm(first_block ~ t) #
#
jpeg("block_1_trend.jpg", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
lines(t, t1$fit, col = "red3", lwd = 2)#
legend(x = "topleft", legend = c("Observed Data", "Fitted Trend"), col = c("skyblue3", "red3"), lty = c(1,1), lwd = c(2,2), inset = 0.05)#
#
dev.off()
jpeg("block_1_ts.jpg", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
abline(h = mean(first_block), col = "red3", lwd = 2)#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
jpeg("block_1_ts.jpg", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
abline(h = mean(first_block), col = "black", lwd = 2)#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
help(auto.arima)
jpeg("block_1_acf.jpg", width = 600, height = 600)#
tsdisplay(first_block) # AR(3)#
dev.off()
jpeg("block_1_acf.jpg", width = 600, height = 600)#
tsdisplay(first_block, main = "Time Series, ACF, and PACF of the SST of the First Block") # AR(3)#
dev.off()
sst_150 = read.csv("scot_sst_150.csv")
sst_150_ts = ts(sst_150, start = c(1870,1), freq = 12)
plot(sst_150_ts)
sst_150_ts = ts(t(sst_150), start = c(1870,1), freq = 12)#
#
plot(sst_150_ts)
library(tidyverse)#
library(forecast)#
library(stats)#
library(tis)#
library(trend)#
library(tseries)#
#
sst_150 = read.csv("scot_sst_150.csv")#
#
sst_150_ts = ts(t(sst_150), start = c(1870,1), end = c(2019,12), freq = 12)#
#
ts.plot(sst_150_ts)
ts.plot(sst_150_ts[,1:50])
ts.plot(sst_150_ts)
ts.plot(sst_150_ts[101:150,])
ts.plot(sst_150_ts[101*12:150*12,])
ts.plot(sst_150_ts[101*12:150*12-1,])
ts.plot(sst_150_ts[1500:1800,])
ts.plot(sst_150_ts[1500:1800,], col = "steelblue2")
ts.plot(sst_150_ts, col = "steelblue2")
ts.plot(sst_150_ts, col = "steelblue2", lty = 0.5)
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5)
png("all_blocks_past_150.png", 1200, 600)#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5)#
dev.off
png("all_blocks_past_150.png", 1200, 600)#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5)#
dev.off()
png("all_blocks_past_150.png", 1200, 600)#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids")#
dev.off()
png("all_blocks_past_150.png", 1200, 600)#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 1.5, cex.lab = 1.5)#
dev.off()
png("all_blocks_past_150.png", 1200, 600)#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
dev.off()
png("all_blocks_past_5.png", 1200, 600)#
ts.plot(sst_150_ts[1741:1800,], col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
dev.off()
plot(sst_150_ts[1741:1800,], col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)
dev.off()
plot(sst_150_ts[1741:1800,], col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)
length(sst_150_ts[1741:1800,])
length(sst_150_ts[1741:1800,1])
sst_5_ts = ts(sst_150_ts[1741:1800,], start = c(2015,1), end = c(2019,12), freq = 12)
png("all_blocks_past_5.png", 1200, 600)#
#
plot(sst_5_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
#
dev.off()
png("all_blocks_past_5.png", 1200, 600)#
#
ts.plot(sst_5_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
#
dev.off()
stl(sst_150[,1])
stl(sst_150_ts[,1])
stl(sst_150_ts[,1], s.window = "periodic")
plot(stl(sst_150_ts[,1], s.window = "periodic"))
mean(sst_150_ts[1:600,])
mean(sst_150_ts[1:600,], na.rm = "TRUE")
mean(sst_150_ts[601:1200,], na.rm = "TRUE")
mean(sst_150_ts[1201:1800,], na.rm = "TRUE")
t = seq(1870, 2019+11/12, by = 1/12)
model = lm(sst_150_ts[1] ~ t)
model = lm(sst_150_ts[,1] ~ t)
model
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
lines(t, model$fitted)
model1 = lm(sst_150_ts[,1] ~ t)#
model2 = lm(sst_150_ts[,300] ~ t)#
#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
lines(t, model1$fitted)#
lines(t, model2$fitted)
model2 = lm(sst_150_ts[,300] ~ t)
model2 = lm(sst_150_ts[,295] ~ t)
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
lines(t, model1$fitted)#
lines(t, model2$fitted)
plot(diff(first_block), ylab = "Annually Change of SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Change of SST in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Detrended Data", col = "skyblue3", lwd = 2, inset = 0.05)
library(tidyverse)#
library(forecast)#
library(stats)#
library(tis)#
library(trend)#
library(tseries)#
#
annual_avg_sst = read.csv("annual_avg_sst_150.csv", row.names = 1)#
loc = read.csv("loc.csv", row.names = 1)#
colnames(annual_avg_sst) = loc[[1]]#
#
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)
plot(diff(first_block), ylab = "Annually Change of SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Change of SST in the Past 150 Years at Block 1")
plot(diff(first_block), ylab = "Annually Change of SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Change of SST in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Detrended Data", col = "skyblue3", lwd = 2, inset = 0.05)
jpeg("block_1_stationary.jpg", width = 600, height = 600)#
#
plot(diff(first_block), ylab = "Annually Change of SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Change of SST in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Detrended Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
plot(sst_150_ts[,1], ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)
plot(sst_150_ts[1600,1800,1], ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)
plot(sst_150_ts[1600:1800,1], ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)
plot(sst_150_ts[1600:1800,1], type = "l", ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)
png("block_1_ts.png", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
abline(h = mean(first_block), col = "black", lwd = 2)#
legend(x = "topleft", legend = "Seasonal Adj. Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
png("block_1_ts_seasonal.jpg", width = 600, height = 600)#
#
plot(sst_150_ts[1600:1800,1], type = "l", ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
png("block_1_ts.png", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Seasonal Adj. Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)
library(tidyverse)#
library(forecast)#
library(stats)#
library(tis)#
library(trend)#
library(tseries)#
#
sst_150 = read_csv("scot_sst_150.csv")#
#
sst_150_ts = ts(t(sst_150), start = c(1870,1), end = c(2019,12), freq = 12)#
#
sst_5_ts = ts(sst_150_ts[1741:1800,], start = c(2015,1), end = c(2019,12), freq = 12)#
#
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)
annual_avg_sst = read.csv("annual_avg_sst_150.csv", row.names = 1)
#***************************************************************************#
# Some TS plots of SST data in the past#
# Dataset: #
#		"scot_sst_150.csv"      	2020-2069  #
# Author: Hao Jin#
#***************************************************************************#
library(tidyverse)#
library(forecast)#
library(stats)#
library(tis)#
library(trend)#
library(tseries)#
#
sst_150 = read_csv("scot_sst_150.csv")#
#
sst_150_ts = ts(t(sst_150), start = c(1870,1), end = c(2019,12), freq = 12)#
#
sst_5_ts = ts(sst_150_ts[1741:1800,], start = c(2015,1), end = c(2019,12), freq = 12)#
#
annual_avg_sst = read.csv("annual_avg_sst_150.csv", row.names = 1)#
#
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)#
#
# ------------------------- Time Series Plot, Trend ------------------------- ##
#
## ---------------- Plot 1 All Blocks, 150 Years, Monthly ---------------- ###
#
png("all_blocks_past_150.png", 1200, 600)#
#
ts.plot(sst_150_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 1870 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
#
dev.off()#
#
## ------------------ Plot 2 All Block, 5 Years, Monthly ------------------ ###
#
png("all_blocks_past_5.png", 1200, 600)#
#
ts.plot(sst_5_ts, col = "steelblue2", lwd = 0.5, main = "Monthly SST from 2015 to 2019 of All 300 Grids", cex.main = 2, cex.lab = 2)#
#
dev.off()#
## ----------------- Plot 3 Block 1, 150 Years, Annually ----------------- ###
#
png("block_1_ts.png", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Seasonal Adj. Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()#
#
## ------------------ Plot 4 block 1, 200 Months, Monthly ------------------ ###
#
png("block_1_ts_seasonal.jpg", width = 600, height = 600)#
#
plot(sst_150_ts[1600:1800,1], type = "l", ylab = "Monthly SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Observed Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()#
## ------------- Plot 5 Trend, Block 1, 150 Years, Annually ------------- ###
#
# The null hypothesis for this test is that there is no monotonic trend in the series.#
# The alternate hypothesis is that a trend exists. This trend can be positive, negative, or non-null.#
#
mk.test(first_block)#
#
t = seq(1870, 1870 + length(first_block)-1)#
t1 = lm(first_block ~ t) #
jpeg("block_1_trend.jpg", width = 600, height = 600)#
#
plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")#
lines(t, t1$fit, col = "red3", lwd = 2)#
legend(x = "topleft", legend = c("Observed Data", "Fitted Trend"), col = c("skyblue3", "red3"), lty = c(1,1), lwd = c(2,2), inset = 0.05)#
#
dev.off()#
#
## ------------- Plot 6 Detrend, First Block 150 Years, Annually ------------- ###
#
jpeg("block_1_stationary.jpg", width = 600, height = 600)#
#
plot(diff(first_block), ylab = "Annually Change of SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Change of SST in the Past 150 Years at Block 1")#
legend(x = "topleft", legend = "Detrended Data", col = "skyblue3", lwd = 2, inset = 0.05)#
#
dev.off()
