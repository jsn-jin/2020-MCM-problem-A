#***************************************************************************
# Using ARIMA Model to Forecast SST over the Next 50 Years
# Dataset: 
#    	"annual_avg_sst_150.csv"      	1870-2019, annually average
# Output:
#	 	"forecast_sst_50.csv"		  	2020-2069, forecasted annually SST
# Author: Hao Jin
#***************************************************************************

library(tidyverse)
library(forecast)
library(stats)
library(tis)
library(trend)
library(tseries)
library(fpp2)

# Data 1, Annually Average
annual_avg_sst = read.csv("annual_avg_sst_150.csv", row.names = 1)

# ------------------------ Time Series Plot ------------------------ #

first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)

png("block_1_ts.png", width = 600, height = 600)

plot(first_block, ylab = "Annually Average SST", xlab = "Time", lwd = 2, col = 'skyblue3', main = "Sea Surface Temperature in the Past 150 Years at Block 1")
legend(x = "topleft", legend = "Seasonal Adj. Data", col = "skyblue3", lwd = 2, inset = 0.05)

dev.off()

# moving average plot
autoplot(first_block) +
  autolayer(ma(first_block, 11), series = "10 yr MA") +
  autolayer(ma(first_block, 21), series = "20 yr MA") +
  autolayer(ma(first_block, 31), series = "30 yr MA") +
  xlab("Time") + 
  ylab("SST")


# ------------------------- Model Selection ------------------------- #

jpeg("block_1_acf.jpg", width = 600, height = 600)
tsdisplay(first_block, main = "Time Series, ACF, and PACF of the SST of the First Block") # AR(3)
dev.off()

first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)

adf.test(first_block, k = 1)

# 101
arima101 = Arima(first_block, order = c(1,0,1), include.drift = TRUE)
plot(forecast(arima101, 50)) 
lines(arima101$fitted, col = "red")

# 300
arima300 = Arima(first_block, order = c(3,0,0), include.drift = TRUE)
plot(forecast(arima300, 50), main = ("Forecasted SST at the First Grid from ARIMA(3,0,0)")) 
lines(arima300$fitted, col = "red")

# 201
arima201 = Arima(first_block, order = c(2,0,1), include.drift = TRUE)
plot(forecast(arima201, 50))
lines(arima201$fitted, col = "red")

# 102
arima102 = Arima(first_block, order = c(1,0,2), include.drift = TRUE)
plot(forecast(arima102, 50))
lines(arima102$fitted, col = "red")


accuracy(arima101) # best model
accuracy(arima300)
accuracy(arima201)
accuracy(arima102)

## --------------------- Out of Sample Evaluation --------------------- ##

training <- subset(first_block, end=length(first_block)-10)
test <- subset(first_block, start=length(first_block)-9)

train.101 <- Arima(training, order = c(1,0,1), include.drift = TRUE)
train.101 %>%
  forecast(h = 10) %>%
  autoplot() + autolayer(test) + ggtitle("Out-of-Sample Evaluation ARIMA(1,0,1)")

train.300 <- Arima(training, order = c(3,0,0), include.drift = TRUE)
train.300 %>%
  forecast(h = 10) %>%
  autoplot() + autolayer(test) + ggtitle("Out-of-Sample Evaluation ARIMA(3,0,0)")

train.201 <- Arima(training, order = c(2,0,1), include.drift = TRUE)
train.201 %>%
  forecast(h = 10) %>%
  autoplot() + autolayer(test) + ggtitle("Out-of-Sample Evaluation ARIMA(2,0,1)")

train.102 <- Arima(training, order = c(1,0,2), include.drift = TRUE)
train.102 %>%
  forecast(h = 10) %>%
  autoplot() + autolayer(test) + ggtitle("Out-of-Sample Evaluation ARIMA(1,0,2)")

accuracy(forecast(train.101), test)[4]
accuracy(forecast(train.300), test)[4]
accuracy(forecast(train.201), test)[4]
accuracy(forecast(train.102), test)[4]

accuracy(forecast(train.101), test)[10]
accuracy(forecast(train.300), test)[10]
accuracy(forecast(train.201), test)[10]
accuracy(forecast(train.102), test)[10]

# ------------------ Forecast for all 300 blocks ------------------ #

ts.plot(annual_avg_sst)

forecast = matrix(nrow = 50, ncol = 300)

for (b in 1:300) {

  # Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
  past_150_yr = annual_avg_sst[,b]
  
  if (is.na(past_150_yr[1])){
    forecast[,b] = rep(NA, 50)
    
  } else {
    fit = Arima(past_150_yr, order = c(3,0,0), include.drift = TRUE)
    forecast[,b] = forecast(fit, 50)$mean
  }
}

colnames(forecast) = loc[[1]]
rownames(forecast) = seq(2020, 2069)
write.csv(forecast, file = "forecast_sst_50.csv")







