annual_sum = annual_sum + sst_150_b[12 * i + j]
}
annual_b[i+1] = annual_sum / 12
}
annual_data_all[i,] = annual_b
}
head(annual_data_all)
sst_150 = read_csv("scot_sst_150.csv") # 1870-2019, monthly data
sst_150 = t(sst_150) # transpose
sst_150_ts <- ts(sst_150, start = c(1870,1), end = c(2019,12), freq = 12)
sst_150_b
sst_150_ts[,2]
plot(sst_150_ts[,2])
plot(sst_150_ts[1,])
plot(sst_150_ts[1,], type = "l")
sst_150 = read_csv("scot_sst_150.csv") # 1870-2019, monthly data
sst_150 = t(sst_150) # transpose
library(tidyverse)
library(forecast)
sst_150 = read_csv("scot_sst_150.csv") # 1870-2019, monthly data
sst_150 = t(sst_150) # transpose
sst_150_ts <- ts(sst_150, start = c(1870,1), end = c(2019,12), freq = 12)
# Step 1: get annualy data (the average of 12 months)
annual_data_all = matrix(nrow = 300, ncol = 150) # resulting matrix
for (b in 1:300) {
# Prepare a vector
annual_b = numeric(150)
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
sst_150_b = sst_150_ts[,b]
# Calculate annual mean, so we get annually average
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_b[12 * i + j]
}
annual_b[i+1] = annual_sum / 12
}
annual_data_all[i,] = annual_b
}
head(annual_data_all)
plot(sst_150_ts[,1], type = "l")
plot(sst_150_ts[,2], type = "l")
plot(sst_150_ts[1,], type = "l")
sst_150_b
annual_b
b
plot(sst_150_ts[,300], type = "l")
dim(sst_150_ts)
plot(sst_150_ts[,300], type = "l")
plot(sst_150_ts[,299], type = "l")
plot(sst_150_ts[,2], type = "l")
dim(annual_data_all)
plot(annual_data_all[1,], type = "l")
plot(annual_data_all[2,], type = "l")
plot(annual_data_all[24,], type = "l")
View(annual_data_all)
View(annual_data_all)
View(sst_150_ts)
View(sst_150_ts)
plot(sst_150_ts[2,], type = "l")
plot(sst_150_ts[,2], type = "l")
plot(annual_data_all[1,], type = "l")
annual_1 = numeric(150)
# Get the data at the first block (-16.5, 62.5)
sst_150_1 = sst_150_ts[,1]
# Calculate annual mean, so we get annually average
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
annual_1
for (b in 1:300) {
# Prepare a vector
annual_b = numeric(150)
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
sst_150_b = sst_150_ts[,b]
# Calculate annual mean, so we get annually average
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_b[12 * i + j]
}
annual_b[i+1] = annual_sum / 12
}
annual_data_all[b,] = annual_b
}
head(annual_data_all)
plot(annual_data_all[1,], type = "l")
plot(annual_data_all[2,], type = "l")
plot(annual_data_all, type = "l")
plot(annual_data_all[,], type = "l")
annual_data_all_ts = ts(annual_data_all, start = c(1870, 1), freq = 12)
ts.plot(annual_data_all_ts)
ts.plot(annual_data_all_ts[,1])
annual_data_all = matrix(nrow = 150, ncol = 300) # resulting matrix
for (b in 1:300) {
# Prepare a vector
annual_b = numeric(150)
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
sst_150_b = sst_150_ts[,b]
# Calculate annual mean, so we get annually average
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_b[12 * i + j]
}
annual_b[i+1] = annual_sum / 12
}
annual_data_all[,b] = annual_b
}
annual_data_all_ts = ts(annual_data_all, start = c(1870, 1), freq = 12)
ts.plot(annual_data_all_ts)
ts.plot(annual_data_all_ts[101:150])
ts.plot(annual_data_all_ts[101:150,])
ts.plot(annual_data_all_ts[101:150,1:50])
ts.plot(annual_data_all_ts[101:150,])
forecast(Arima(b_past_150_yr, order = c(3,1,0), include.drift = TRUE))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima_model3, 50))
arima_model4 = Arima(annual_1_ts, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima_model4, 50))
arima_model5 = Arima(annual_1_ts, order = c(1,1,0), include.drift = TRUE)
plot(forecast(arima_model5, 50))
arima_model5 = Arima(annual_1_ts, order = c(1,1,0), include.drift = TRUE)
arima_model3 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(annual_1_ts, 50))
plot(arima_model3$fitted)
plot(forecast(annual_1_ts, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(annual_1_ts, 50))
plot(forecast(arima_model3, 50))
forecast(arima_model3, 50)
forecast(arima_model3, 50)$Forecast
forecast(arima_model3, 50)
forecast(arima_model3, 50)[[2]]
str(forecast(arima_model3, 50))
forecast(arima_model3, 50)$mean
forecast = matrix(nrow = 50, ncol = 300)
for (b in 1:300) {
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
b_past_150_yr = annual_data_all_ts[,b]
forecast[,b] = forecast(Arima(b_past_150_yr, order = c(3,1,0), include.drift = TRUE))$mean
}
forecast = matrix(nrow = 50, ncol = 300)
for (b in 1:300) {
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
past_150_yr = annual_data_all_ts[,b]
fit = Arima(past_150_yr, order = c(3,1,0), include.drift = TRUE)
forecast[,b] = forecast(fit, 50)$mean
}
forecast = matrix(nrow = 50, ncol = 300)
for (b in 1:300) {
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
past_150_yr = annual_data_all_ts[,b]
if (is.na(past_150_yr[1])){
forecast[,b] = rep(NA, 50)
} else {
fit = Arima(past_150_yr, order = c(3,1,0), include.drift = TRUE)
forecast[,b] = forecast(fit, 50)$mean
}
}
View(forecast)
location_info = read_csv("scot_sst_aug")
location_info = read_csv("scot_sst_aug.csv")
paste("Today is", "mon")
View(location_info)
lon = location_info[[1]]
lat = location_info[[2]]
loc = character(300)
for (i in 1:300) {
loc[i] = paste(as.character(lon[i]), as.character(lat[i]))
}
loc
colnames(forecast) = loc
rownames(forecast) = seq(2020, 2069)
write.csv(sim1, file = "deterministic.csv")
colnames(forecast) = loc
rownames(forecast) = seq(2020, 2069)
write.csv(forecast, file = "deterministic.csv")
write.csv(forecast, file = "sst_forecast_50.csv")
# Sanity check
plot(sst[,1], type = "l") # seasonal pattern observed, the data is good to go
sst_ts <- ts(sst, start = c(1970,1), end = c(2019,12), freq = 12)
ts.plot(sst_ts)
forecast(sst_ts, n.ahead = 600)
library(tidyverse)
sst_150 = read_csv("scot_sst_150.csv") # 1870-2019, monthly data
sst_150 = t(sst_150) # transpose
sst_150_ts <- ts(sst_150, start = c(1870,1), end = c(2019,12), freq = 12)
# Get annually data (the average of 12 months)
annual_avg_sst = matrix(nrow = 150, ncol = 300) # to store annually average results
for (b in 1:300) { # for each block
# Prepare a vector
b.annually = numeric(150)
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
b.monthly = sst_150_ts[,b]
# Calculate annually mean
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_b[12 * i + j]
}
b.annually[i+1] = annual_sum / 12
}
annual_avg_sst[,b] = b.annually
}
annual_avg_sst = ts(annual_avg_sst, start = c(1870, 1), freq = 12)
# Get location information
location_info = read_csv("scot_sst_aug.csv")
lon = location_info[[1]]
lat = location_info[[2]]
loc = character(300)
for (i in 1:300) {
loc[i] = paste(as.character(lon[i]), as.character(lat[i]))
}
colnames(annual_avg_sst) = loc
rownames(annual_avg_sst) = seq(1870, 2019)
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
for (b in 1:300) { # for each block
# Prepare a vector
b.annually = numeric(150)
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
b.monthly = sst_150_ts[,b]
# Calculate annually mean
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + b.monthly[12 * i + j]
}
b.annually[i+1] = annual_sum / 12
}
annual_avg_sst[,b] = b.annually
}
annual_avg_sst = ts(annual_avg_sst, start = c(1870, 1), freq = 12)
# Get location information
location_info = read_csv("scot_sst_aug.csv")
lon = location_info[[1]]
lat = location_info[[2]]
loc = character(300)
for (i in 1:300) {
loc[i] = paste(as.character(lon[i]), as.character(lat[i]))
}
colnames(annual_avg_sst) = loc
rownames(annual_avg_sst) = seq(1870, 2019)
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
past = read_csv("annual_avg_sst.csv")
View(past)
past = read_csv("annual_avg_sst.csv", row.names = 1)
past = read_csv("annual_avg_sst.csv", skip = 0)
View(past)
help("read_csv")
past = read.table("annual_avg_sst.csv",  row.names = 1)
help("read.table")
past = read.table("annual_avg_sst.csv", header = TRUE, row.names = 1)
past = read.table("annual_avg_sst.csv", header = TRUE, row.names = 1, seq = ",")
past = read.csv("annual_avg_sst.csv", header = TRUE, row.names = 1)
View(past)
rownames(past)
colnames(past)
past = read_csv("annual_avg_sst.csv", header = TRUE, row.names = 1)
View(past)
View(annual_avg_sst)
past = read_csv2("annual_avg_sst.csv")
past = read_csv("annual_avg_sst.csv")
past = read_csv("annual_avg_sst.csv", col_names = TRUE)
help("spec")
help("read_csv")
past = read_csv("annual_avg_sst.csv", col_types = string)
past = read_csv("annual_avg_sst.csv", col_types = "string")
past = read_csv("annual_avg_sst.csv", col_types = "s")
past = read_csv("annual_avg_sst.csv", col_types = col_character())
past = read_csv("annual_avg_sst.csv", col_types = "cc")
past = read_csv("annual_avg_sst.csv", col_types = cols(.default = "c"))
View(past)
help("read.csv")
write.csv(annual_avg_sst, file = "annual_avg_sst.csv", row.names = TRUE)
past = read_csv("annual_avg_sst.csv", col_types = cols(.default = "c"))
help("write_csv")
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
past = read.csv("annual_avg_sst.csv", row.names = TRUE)
past = read.csv("annual_avg_sst.csv", row.names = 1)
View(past)
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = "character")
View(past)
help("read.csv")
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = c("character"))
View(past)
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = c("numrtic"))
loc[i] = paste(as.character(lat[i]), as.character(lon[i]))
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
colnames(annual_avg_sst) = loc
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
loc = character(300)
for (i in 1:300) {
loc[i] = paste(as.character(lat[i]), as.character(lon[i]))
}
colnames(annual_avg_sst) = loc
rownames(annual_avg_sst) = seq(1870, 2019)
write.csv(annual_avg_sst, file = "annual_avg_sst.csv")
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = c("character"))
View(past)
colnames(past)
colnames(past)[1]
colnames(past)[15]
write.csv(loc, file = "loc.csv")
loc = read_csv("loc.csv")
View(loc)
colnames(past) = loc[[2]]
View(past)
tsdisplay(past[[1]]) # AR(3)
tsdisplay(past[,1]) # AR(3)
View(past)
library(forecast)
tsdisplay(past[,1]) # AR(3)
tsdisplay(first_block) # AR(3)
first_block = ts(past[,1], start = c(1870,1), freq = 12)
tsdisplay(first_block) # AR(3)
past[,1]
first_block = ts(past[,1], start = c(1870,1), freq = 1)
first_block = ts(past[,1], start = 1870, freq = 1)
tsdisplay(first_block) # AR(3)
first_block = ts(past[,1], start = 1870, end = 2019)
first_block = ts(past[,1], start = 1870, end = 2019)
first_block
tsdisplay(first_block) # AR(3)
acf(first_block) # AR(3)
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = c("numeric"))
past = read.csv("annual_avg_sst.csv", row.names = 1, colClasses = "numeric")
past = read.csv("annual_avg_sst.csv", row.names = 1)
class(past[3,3])
past = read.csv("annual_avg_sst.csv", row.names = 1)
loc = read_csv("loc.csv")
colnames(past) = loc[[2]]
first_block = ts(past[,1], start = 1870, end = 2019)
acf(first_block) # AR(3)
tsdisplay(diff(annual_1_ts))
tsdisplay(diff(annual_1_ts))
tsdisplay(first_block)
arima310 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima_model310, 50))
plot(forecast(arima_model310, 50))
arima310 = Arima(first_block, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima310, 50))
plot(forecast(arima310, 50))
arima310 = Arima(first_block, order = c(3,1,0), include.drift = FALSE)
plot(forecast(arima310, 50))
arima310 = Arima(first_block, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima310, 50))
arima310 = Arima(first_block, order = c(3,1,0), include.drift = FALSE)
plot(forecast(arima310, 50))
forecast(arima_model310, 50)$mean
forecast(arima310, 50)$mean
arima310 = Arima(first_block, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima310, 50))
forecast(arima310, 50)$mean
arima210 = Arima(first_block, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima210, 50))
arima110 = Arima(first_block, order = c(1,1,0), include.drift = TRUE)
plot(forecast(arima110, 50))
accuracy(arima310) # Best Model
accuracy(arima210)
accuracy(arima110)
ts.plot(annual_data_all_ts[101:150,])
ts.plot(annual_data_all_ts)
annual_avg_sst = read.csv("annual_avg_sst.csv", row.names = 1)
loc = read_csv("loc.csv")
colnames(annual_avg_sst) = loc[[2]]
loc = read.csv("loc.csv", row.names = 1)
colnames(annual_avg_sst) = loc
View(loc)
View(past)
first_block = ts(annual_avg_sst[,1], start = 1870, end = 2019)
tsdisplay(first_block) # AR(3)
arima310 = Arima(first_block, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima310, 50))
forecast(arima310, 50)$mean
arima210 = Arima(first_block, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima210, 50))
arima110 = Arima(first_block, order = c(1,1,0), include.drift = TRUE)
plot(forecast(arima110, 50))
accuracy(arima310) # Best Model
accuracy(arima210)
accuracy(arima110)
ts.plot(annual_avg_sst)
forecast = matrix(nrow = 50, ncol = 300)
for (b in 1:300) {
# Get the data at the b-th block: first@(-16.5, 62.5), last@(2.5, 48.5)
past_150_yr = annual_avg_sst[,b]
if (is.na(past_150_yr[1])){
forecast[,b] = rep(NA, 50)
} else {
fit = Arima(past_150_yr, order = c(3,1,0), include.drift = TRUE)
forecast[,b] = forecast(fit, 50)$mean
}
}
colnames(forecast) = loc
rownames(forecast) = seq(2020, 2069)
write.csv(forecast, file = "sst_forecast_50.csv")
loc
ncol(forecast)
colnames(annual_avg_sst) = loc
colnames(forecast) = loc
length(loc)
colnames(annual_avg_sst) = loc[[1]]
colnames(forecast) = loc[[1]]
colnames(forecast) = loc[[1]]
rownames(forecast) = seq(2020, 2069)
write.csv(forecast, file = "sst_forecast_50.csv")
write.csv(forecast, file = "forecast_sst_50.csv")
write.csv(annual_avg_sst, file = "annual_avg_sst_150.csv")
read_csv("forecast_sst_50.csv")
read.csv("forecast_sst_50.csv", row.names = 1)
rm(list = ls())
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
# Actual Data
2029 = matrix(forecast[10,], nrow = 15, ncol = 20, byrow = TRUE)
# Actual Data
sst_2029 = matrix(forecast[10,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
library('plot.matrix')
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
library(tidyverse)
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
x <- matrix(runif(35), ncol=5) # create a numeric matrix object
x
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(x)
sst_2029 = matrix(forecast[10,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
sst_2029 = matrix(forecast[10,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(sst_2029) = seq(-16.5, 2.5, 1)
rownames(sst_2029) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
library(plot.matrix)
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = topo.colors)
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1),  col = "topo.colors")
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", col = "topo.colors")
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1))
plot(sst_2029)
x <- matrix(runif(35), ncol=5) # create a numeric matrix object
x
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(x)
sst_2029 = matrix(forecast[10,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(sst_2029) = seq(-16.5, 2.5, 1)
rownames(sst_2029) = seq(62.5, 48.5, -1)
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(7,13,0.1), col = "topo.colors")
plot(sst_2029)
View(forecast)
class(forecast[,1])
class(forecast[1,])
class(forecast[1,1])
class(forecast[1])
class(forecast[2])
forecast[2]
forecast[[2]]
forecast[[2]]
forecast[2]
forecast[2,]
head(forecast[2])
head(forecast[2,])
head(forecast[2,1:10])
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
forecast = matrix(frecast)
forecast = matrix(forecast)
View(forecast)
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
sst_2029 = matrix(as.numeric(forecast[10,]), nrow = 15, ncol = 20, byrow = TRUE)
colnames(sst_2029) = seq(-16.5, 2.5, 1)
rownames(sst_2029) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
plot(sst_2029)
min(forecast, na.rm = TRUE)
max(forecast, na.rm = TRUE)
library(tidyverse)
library('plot.matrix')
library('LSD')
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
# Example
x <- matrix(runif(35), ncol=5) # create a numeric matrix object
x
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(x, col = topo.colors)
# Actual Data
sst_2029 = matrix(as.numeric(forecast[10,]), nrow = 15, ncol = 20, byrow = TRUE)
colnames(sst_2029) = seq(-16.5, 2.5, 1)
rownames(sst_2029) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
min(forecast, na.rm = TRUE)
max(forecast, na.rm = TRUE)
View(forecast)
forecast = read.csv("forecast_sst_50.csv", row.names = 1)
loc = read.csv("loc.csv", row.names = 1)
colnames(forecast) = loc[[1]]
View(forecast)
sst_2029 = matrix(as.numeric(forecast[10,]), nrow = 15, ncol = 20, byrow = TRUE)
colnames(sst_2029) = seq(-16.5, 2.5, 1)
rownames(sst_2029) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(sst_2029, xlab = "Longitude", ylab = 'Latitude', main = "2029 SST", breaks = seq(8,15,0.2), col = topo.colors)
