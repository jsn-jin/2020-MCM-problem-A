library(tidyverse)
sst = read_csv("scot_sst.csv")
head(sst)
head(sst)
sst = t(sst)
head(sst)
plot(sst[[1]])
plot(sst[,1])
plot(sst[,1], type = "l")
sst_ts <- ts(sst, start = c(1970,1), end = c(2019,12), freq = 12)
head(sst_ts)
sst_ts
ts.plot(sst_ts[,1])
ts.plot(sst_ts)
forecast(sst_ts, n.ahead = 600)
library(forecast)
forecast(sst_ts, n.ahead = 600)
lapply(sst_ts, forecast)
lapply(sst_ts[,1:10], forecast)
forecast(sst_ts[,1])
forecast(sst_ts[,1], n.ahead = 50)
help(forecast)
forecast(sst_ts[,1], 50)
forecast(sst_ts[,1], 600)
forecast(sst_ts[,1:2], 600)
plot(forecast(auto.arima(sst_ts[,1]), 600)))
plot(forecast(auto.arima(sst_ts[,1]), 600))
plot(forecast(ets(sst_ts[,1]), 12))
plot(forecast(ets(sst_ts[,1]), 120))
plot(forecast(HoltWinters(sst_ts[,1]), 120))
plot(forecast(HoltWinters(sst_ts[,1]), 600))
plot(forecast(HoltWinters(sst_ts[,1]), 120))
auto.arima(sst_ts[,1])
ACF(sst_ts[,1])
acf(sst_ts[,1])
tsdisplay(sst_ts[,1])
arima(sst_ts[,1], order = c(2, 0, 0), seasonal = c(1, 0, 0), include.drift = TRUE)
Arima(sst_ts[,1], order = c(2, 0, 0), seasonal = c(1, 0, 0), include.drift = TRUE)
arima_model = Arima(sst_ts[,1], order = c(2, 0, 0), seasonal = c(1, 0, 0), include.drift = TRUE)
plot(forecast(arima_model), 120)
plot(forecast(arima_model), 600)
plot(forecast(arima_model, 120))
plot(forecast(arima_model, 600))
plot(forecast(arima_model, 12))
plot(forecast(arima_model, 120))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 0), seasonal = c(1, 0, 0), include.drift = TRUE)
plot(forecast(arima_model, 120))
ts.display(sst_ts)
tsdisplay(sst_ts)
tsdisplay(sst_ts[,1])
arima_model = Arima(sst_ts[,1], order = c(6, 0, 0), seasonal = c(1, 0, 0), include.drift = TRUE)
plot(forecast(arima_model, 120))
arima_model = Arima(sst_ts[,1], order = c(6, 0, 0), seasonal = c(1, 1, 0), include.drift = TRUE)
plot(forecast(arima_model, 120))
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(2, 0, 0), seasonal = c(1, 1, 0), include.drift = TRUE)
plot(forecast(arima_model, 600))
help("auto.arima")
auto.arima(sst_ts[,1])
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(0, 0, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(0, 1, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(1, 1, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(, 1, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(0, 1, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
plot(forecast(auto.arima(sst_ts[,1]), 600))
plot(forecast(auto, 600))
auto = auto.arima(sst_ts[,1])
plot(forecast(auto, 600))
auto
arima_model = Arima(sst_ts[,1], order = c(1, 1, 0), seasonal = c(0, 0, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(1, 1, 0), seasonal = c(0, 0, 0), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 0), seasonal = c(1, 1, 0), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(1, 1, 0), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(0, 1, 1), include.drift = TRUE)
plot(forecast(arima_model, 600))
arima_model = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(1, 1, 0), include.drift = TRUE)
plot(forecast(arima_model, 600))
accuracy(forecast(arima_model))
arima_model1 = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(1, 1, 0))
plot(forecast(arima_model, 600))
accuracy(forecast(arima_model1))
accuracy(forecast(arima_model2))
arima_model2 = Arima(sst_ts[,1], order = c(0, 0, 1), seasonal = c(0, 1, 1))
accuracy(forecast(arima_model2))
plot(forecast(arima_model2, 600))
sst_1 = sst_ts[,1]
annual_1 = numeric(50)
annual_1 = numeric(50)
sst_1 = sst_ts[,1]
for (i in 0:49) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
plot(annual_1)
plot(annual_1, type = "l")
annual_1_ts = ts(annual_1, start = 1970, end = 2019, freq = 1)
length(annual_1_ts)
auto.arima(annual_1)
sst_150 = read_csv("scot_sst_150.csv")
sst_150_ts <- ts(sst_150, start = c(1870,1), end = c(2019,12), freq = 12)
annual_1 = numeric(150)
sst_150_1 = sst_150_ts[,1]
annual_1 = numeric(150)
sst_150_1 = sst_150_ts[,1]
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
plot(annual_1, type = "l")
annual_1_ts = ts(annual_1, start = 1870, end = 2019, freq = 1)
length(annual_1_ts)
annual_1 = numeric(150)
sst_150_1 = sst_150_ts[,1]
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
annual_1_ts = ts(annual_1, start = 1870, end = 2019, freq = 1)
length(annual_1_ts)
plot(annual_1_ts, type = "l")
annual_1 = numeric(150)
sst_150_1 = sst_150_ts[,1]
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
annual_1_ts = ts(annual_1, start = 1870, end = 2019, freq = 1)
length(annual_1_ts)
plot(annual_1_ts, type = "l")
sst_150 = read_csv("scot_sst_150.csv")
sst_150 = t(sst_150)
sst_150_ts <- ts(sst_150, start = c(1870,1), end = c(2019,12), freq = 12)
annual_1 = numeric(150)
sst_150_1 = sst_150_ts[,1]
for (i in 0:149) {
annual_sum = 0
for (j in 1:12) {
annual_sum = annual_sum + sst_150_1[12*i + j]
}
annual_1[i+1] = annual_sum / 12
}
annual_1_ts = ts(annual_1, start = 1870, end = 2019, freq = 1)
length(annual_1_ts)
plot(annual_1_ts, type = "l")
auto.arima(annual_1_ts)
forecast(annual_1_ts)
plot(forecast(annual_1_ts))
plot(forecast(auto.arima(annual_1_ts)))
plot(forecast(HoltWinters(annual_1_ts)))
annual_1_ts
plot(forecast(HoltWinters(annual_1_ts)))
HoltWinters(annual_1_ts)
HoltWinters(annual_1_ts)
ets(annual_1_ts)
forecast(ets(annual_1_ts))
tsdisplay(annual_1_ts)
tsdisplay(arima(annual_1_ts, order = c(3,1,0)))
tsdisplay(Arima(annual_1_ts, order = c(3,1,0)))
(Arima(annual_1_ts, order = c(3,1,0))
Arima(annual_1_ts, order = c(3,1,0))
Arima(annual_1_ts, order = c(3,1,0))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0))
plot(forecast(arima_model3))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0))
plot(forecast(arima_model3))
plot(forecast(arima_model3))
plot(forecast(arima_model3))
plot(forecast(arima_model3, 600))
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,0,0))
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0))
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,1,1))
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,0,0))
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,0,0), include.drift = TRUE)
plot(forecast(arima_model3, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima_model3, 50))
tsdisplay(annual_1_ts)
tsdisplay(diff(annual_1_ts))
arima_model3 = Arima(annual_1_ts, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima_model3, 50))
auto.arima(annual_1_ts)
tsdisplay(annual_1_ts)
tsdisplay(diff(annual_1_ts))
tsdisplay(annual_1_ts)
plot(forecast(arima_model3, 50))
plot(forecast(arima_model4, 50))
arima_model4 = Arima(annual_1_ts, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima_model4, 50))
arima_model3 = Arima(annual_1_ts, order = c(3,1,0), include.drift = TRUE)
plot(forecast(arima_model3, 50))
arima_model4 = Arima(annual_1_ts, order = c(2,1,0), include.drift = TRUE)
plot(forecast(arima_model4, 50))
accuracy(arima_model3)
accuracy(arima_model4)
arima_model5 = Arima(annual_1_ts, order = c(1,1,0), include.drift = TRUE)
plot(forecast(arima_model5, 50))
accuracy(arima_model5)
sum(is.na(sst_150_ts[1,]))
length(sst_150_ts[1,])
sum(is.na(sst_150_ts[123,]))
library('plot.matrix')
x <- matrix(runif(35), ncol=5) # create a numeric matrix object
class(x)
#> [1] "matrix"
par(mar=c(5.1, 4.1, 4.1, 4.1)) # adapt margins
plot(x)
x
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20, byrow = TRUE)
test
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20, byrow = TRUE)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test)
plot(test, col=topo.colors)
colnames(test) = seq(-17.5, 2.5)
seq(-17.5, 2.5, 1)
colnames(test) = seq(-17.5, 2.5, 1)
colname(test) = seq(-17.5, 2.5, 1)
test$colname = seq(-17.5, 2.5, 1)
colnames(test) = seq(-17.5, 2.5, 1)
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-17.5, 2.5, 1)
length(seq(-17.5, 2.5, 1))
length(seq(-16.5, 2.5, 1))
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 43.5, -1)
rownames(test) = seq(62.5, 48.5, -1)
plot(test, col=topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude' col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', key = "SST", col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', key = "SST", col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", col = topo.colors)
test = matrix(sst_150_ts[1,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", col = topo.colors)
test = matrix(sst_150_ts[1795,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "July 2019 SST", col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "July 2019 SST", breaks=range(5,25),  col = topo.colors)
min(sst_150_ts)
min(sst_150_ts, na.rm = TRUE)
max(sst_150_ts, na.rm = TRUE)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "July 2019 SST", breaks=range(2,20),  col = topo.colors)
test = matrix(sst_150_ts[1,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks=range(2,20),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,0.5),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[2,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[5,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[8,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[1,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar=c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[888,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[900,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Jan. 1870 SST", breaks = seq(2,20,1),  col = topo.colors)
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(2,20,1),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(2,15,1),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(5,15,1),  col = topo.colors)
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(5,15,1),  col = topo.colors)
test = matrix(sst_150_ts[1800,], nrow = 15, ncol = 20, byrow = TRUE)
colnames(test) = seq(-16.5, 2.5, 1)
rownames(test) = seq(62.5, 48.5, -1)
par(mar = c(5.1, 4.1, 4.1, 4.1))
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(5,15,1),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(2,20,1),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(2,20,1),  col = topo.colors)
min(test, na.rm = TRUE)
max(test, na.rm = TRUE)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = range(7,13),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(7,13,0.5),  col = topo.colors)
plot(test, xlab = "Longitude", ylab = 'Latitude', main = "Dec. 2019 SST", breaks = seq(7,13,0.1),  col = topo.colors)
# Sanity check
plot(sst[,1], type = "l")
ts.plot(sst_ts)
forecast(sst_ts, n.ahead = 600)
library(forecast)
